{"version":3,"sources":["components/Header.js","components/LeftSideBar.js","components/RandomYmd.js","components/RandomString.js","App.js","serviceWorker.js","index.js"],"names":["Header","feature","this","props","className","bgColor","headerName","name","react_default","a","createElement","Component","LeftSideBar","_this$props","index","onClickFeature","classOfA","classOfLi","href","replace","isActive","react_router_dom","to","key","onClick","RandomYmd","RandomString","type","placeholder","aria-label","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","textColor","bind","assertThisInitialized","item","_this2","indexOf","map","setState","_this3","filter","components_Header","components_LeftSideBar","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc595668.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./component.css\";\n\nclass Header extends Component {\n    render() {\n        const { feature } = this.props;\n        let className = \"container-fluid header-height \" + feature.bgColor;\n        let headerName = feature.name;\n        return (\n            <div className={className}>\n                <div className=\"row w-100 h-100 mx-0\">\n                    <div className=\"col-2 text-center d-flex align-items-center\">\n                        <h4>Tool Random</h4>\n                    </div>\n                    <div className=\"col-10 d-flex justify-content-center align-items-center\">\n                        <h4>{headerName}</h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nclass LeftSideBar extends Component {\n    render() {\n        const { feature, index, onClickFeature } = this.props;\n        let classOfA = \"nav-link text-muted text-center font-weight-bold\";\n        let classOfLi = \"nav-item \";\n        let href = feature.name.replace(' ', '');\n        if (feature.isActive) {\n            classOfA = classOfA.replace(\"text-muted\", \"text-light\");\n            classOfLi += feature.bgColor;\n        }\n        return (\n            <li className={classOfLi}>\n                <Link className={classOfA}\n                    to={href}\n                    key={index}\n                    onClick={onClickFeature}>{feature.name}</Link>\n            </li>\n        )\n    }\n}\n\nexport default LeftSideBar;\n","import React, { Component } from 'react';\n\nclass RandomYmd extends Component {\n    render() {\n        return (\n            <p>a</p>\n        )\n    }\n}\n\nexport default RandomYmd;","import React, { Component } from 'react';\nimport './component.css';\n\nclass RandomString extends Component {\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-5 text-right\">\n                    <div className=\"input-group mb-3 input__width\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\">Prefix</span>\n                        </div>\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" />\n                        <div className=\"input-group-append\">\n                            <span className=\"input-group-text\">0</span>\n                        </div>\n                    </div>\n\n                    <div className=\"input-group mb-3 input__width\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\">From</span>\n                        </div>\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" />\n                    </div>\n\n                    <div className=\"input-group mb-3 input__width\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\">&nbsp;&nbsp;To&nbsp;&nbsp;</span>\n                        </div>\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" />\n                    </div>\n\n                    <div className=\"form-group d-flex input__width\">\n                        <div className=\"input-group-prepend\">\n                            <label className=\"input-group-text\">Type</label>\n                        </div>\n                        <select className=\"form-control\">\n                            <option>Random</option>\n                            <option>Order List</option>\n                        </select>\n                    </div>\n\n                    <div className=\"input-group mb-3 input__width\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\">Quantity</span>\n                        </div>\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" />\n                    </div>\n\n                    <div className=\"pr-5\">\n                        <button type=\"button\" className=\"btn btn-primary\">Random</button>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RandomString;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport LeftSideBar from './components/LeftSideBar';\nimport RandomYmd from './components/RandomYmd';\nimport RandomString from './components/RandomString';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      feature: [\n        { \"name\": \"Random String\", \"isActive\": true, \"bgColor\": \"bg-primary\", \"textColor\": \"text-primary\" },\n        { \"name\": \"Random Ymd\", \"isActive\": false, \"bgColor\": \"bg-success\", \"textColor\": \"text-success\" }\n      ]\n    }\n    this.onClickFeature = this.onClickFeature.bind(this);\n  }\n\n  onClickFeature(item) {\n    return () => {\n      const { feature } = this.state;\n      const index = feature.indexOf(item);\n      let state = feature;\n      state.map((item) => item.isActive = false)\n      state[index].isActive = true;\n      this.setState({\n        feature: feature\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          {\n            this.state.feature.filter((item) => item.isActive === true).map((item, index) => <Header feature={item} key={index} />)\n          }\n\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-2 sidebar__height px-0\">\n                <ul className=\"nav flex-column\">\n                  {this.state.feature.map((item, index) =>\n                    <LeftSideBar\n                      feature={item}\n                      key={index}\n                      onClickFeature={this.onClickFeature(item)}\n                    />\n                  )}\n                </ul>\n              </div>\n              <div className=\"col-10 mt-5\">\n                <Route path=\"/RandomYmd\" component={RandomYmd} />\n                <Route path=\"/RandomString\" component={RandomString} />\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}